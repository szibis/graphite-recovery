#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

from pygtail import Pygtail
import logging
import time
import errno
import json
import re
import sys
import os
import paramiko
import ConfigParser
import argparse


class ParseArgs:
    def parse_args(self):
        """ Parse args from console"""
        parser = argparse.ArgumentParser()
        parser.add_argument("-c", "--config",
                            help="Config file for your recovery",
                            action="store")
        option = parser.parse_args()
        return option


def main():
    """ Main function to generate dashboards """
    """ Parse option args """
    parseargs = ParseArgs()
    option = parseargs.parse_args()
    if option.config is None:
        logging.error('No -c or --config option specified, for more use -h',
                      exc_info=True)
        exit(1)
    else:
        config_opt = option.config
    """ Load config file """
    try:
        config = ConfigParser.RawConfigParser()
        config.read(config_opt)
    except (SystemExit, KeyboardInterrupt):
        raise
    except Exception, e:
        logging.error('Failed to open config file %s' % (config),
                      exc_info=True)
        exit(1)

    """ Get config option """
    ssh_privkey = config.get('ssh', 'private_key')
    ssh_user = config.get('ssh', 'user')
    ssh_port = int(config.get('ssh', 'port'))
    hosts = json.loads(config.get('main', 'hosts'))
    carbon_creates = config.get('main', 'carbon_creates')

    while 1:
        mpkey = os.path.expanduser(ssh_privkey)
        sftp = None

        for line in Pygtail(carbon_creates):
            match = re.search(r"creating database file\s(.*)\s\(archive=",
                              line)
            if match:
                wsp_file = match.group(1)
                full_time = float()
                empty_hosts = []
                for host in hosts:
                    copy_start = time.time()
                    transport = paramiko.Transport((host, ssh_port))
                    mykey = paramiko.RSAKey.from_private_key_file(mpkey)
                    transport.connect(username=ssh_user, pkey=mykey)
                    sftp = paramiko.SFTPClient.from_transport(transport)
                    try:
                        sftp.get(wsp_file, wsp_file)
                        copy_elapsed = (time.time() - copy_start)
                        print '{0} -> localhost - Sync Success - (time: \
{1:.3f} sec): {2}'.format(host, copy_elapsed, wsp_file)
                    except IOError as e:
                        if e.errno == errno.ENOENT:
                            copy_elapsed = (time.time() - copy_start)
                            full_time = full_time + copy_elapsed
                            empty_hosts.append(host)
                            pass
                if empty_hosts:
                    print "Empty Hosts (time: {0:.3f} sec): \
{1}".format(full_time, ', '.join(empty_hosts))
        sftp.close()
        transport.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print >> sys.stderr, ' User interrupted.'
        sys.exit(0)
